<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ include file="..\ServiceCodegen.ttinclude" #>
<#
	string rulesfile = Host.ResolvePath(@"..\ServiceCodegen.xml");
	PMethod[] mlist = LoadCodegen(rulesfile);
	EmitHeader();
#>
using System;
using System.Threading.Tasks;
using RCS.Carbon.Shared;
using RCS.Azure.Data.Common;
using TSAPI.Public.Domain.Metadata;
using TSAPI.Public.Domain.Interviews;

#nullable enable

namespace Carbon.Examples.WebService.Common
{
	partial class CarbonServiceClient
	{
<#
	EmitMethods(mlist);
#>
	}
}
<#
void EmitMethods(PMethod[] mlist)
{
	var groups = mlist.GroupBy(m => m.RouteBase).Select(x => new { RBase = x.Key, Methods = x.ToArray() }).ToArray();
	foreach (var grp in groups)
	{
		EmitGroup(grp.RBase, grp.Methods);
	}
}

void EmitGroup(string groupname, PMethod[] methods)
{
#>
		#region /<#=groupname#> Client Methods

<#
	foreach (var m in methods)
	{
		if (m.Summary != null)
		{
			string[] lines = NiceLines(m.Summary);
#>
		/// <summary>
<#
			foreach (string line in lines)
			{
#>
		/// <#=line#>
<#
			}
#>
		/// </summary>
<#
		}
		if (m.Params != null)
		{
			foreach (var p in m.Params.Where(p => p.Desc != null))
			{
#>
		/// <param name="<#=p.Name#>"><#=p.Desc#></param>
<#
			}
		}
		if (m.ReturnDesc != null)
		{
			string rdesc = Unesc(m.ReturnDesc);
#>
		/// <returns><#=rdesc#></returns>
<#
		}
		if (m.RefTypeParams.Length > 0)
		{
			string namejoin = string.Join(" or ", m.RefTypeParams.Select(p => $"<paramref name=\"" + p.Name + "\"/>"));
#>
		/// <exception cref="ArgumentNullException">Thrown if null value passed in <#=namejoin#>.</exception>
<#
		}
		if (m.Exs != null)
		{
			foreach (var e in m.Exs)
			{
#>
		/// <exception cref="<#=e.Type#>"><#=Unesc(e.Desc)#></exception>
<#
			}
		}
		if (m.Remarks != null)
		{
			string[] lines = NiceLines(m.Remarks);
#>
		/// <remarks>
<#
			foreach (string line in lines)
			{
#>
		/// <#=line#>
<#
			}
#>
		/// </remarks>
<#
		}
#>
		[global::System.CodeDom.Compiler.GeneratedCode("<#=TTName#>", "<#=TTVer#>")]
		public async Task<<#=m.ReturnType#>> <#=m.Name#>(<#=m.MakeParams1()#>)
		{
<#
		foreach (PParam p in m.RefTypeParams)
		{
#>
			if (<#=p.Name#> == null) throw new ArgumentNullException(nameof(<#=p.Name#>));
<#
		}
		if (m.Method == "Get")
		{
#>
			return await InnerGet<<#=m.ReturnType#>>($"<#=m.Endpoint#>");
<#
		}
		else if (m.Method == "Post")
		{
			if (m.WebPostType != null && m.WebPostDirect != true)	// FRAGILE
			{
#>
			var request = new <#=m.WebPostType#>(<#=m.MakeParams2()#>);
<#
			}
			if (m.Session == "start")
			{
#>
			Session = await InnerPost<<#=m.ReturnType#>>($"<#=m.Endpoint#>", request);
			EnsureIdHeader();
			return Session;
<#
			}
			else
			{
				if (m.WebPostType == null)
				{
#>
			return await InnerPost<<#=m.ReturnType#>>($"<#=m.Endpoint#>", <#=m.Params[0].Name#>);
<#
				}
				else
				{
					string arg = m.WebPostDirect == true ? m.Params[0].Name : "request";	// FRAGILE
#>
			return await InnerPost<<#=m.ReturnType#>>($"<#=m.Endpoint#>", request);
<#
				}
			}
		}
		else if (m.Method == "Delete")
		{
			if (m.Session == "end")
			{
#>
			<#=m.ReturnType#> result = await InnerDelete<<#=m.ReturnType#>>($"<#=m.Endpoint#>");
			Session = null;
			EnsureIdHeader();
			return result;
<#
			}
			else
			{
#>
			return await InnerDelete<<#=m.ReturnType#>>($"<#=m.Endpoint#>");
<#
			}
		}
#>
		}

<#
	}
#>
		#endregion

<#
}
 #>