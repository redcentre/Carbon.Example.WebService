<#+
PMethod[] LoadCodegen(string rulesfile)
{
	string Getattr(XElement elem, string name)
	{
		string s = (string)elem.Attribute(name);
		return string.IsNullOrEmpty(s) ? null : s;
	}
	string Getelem(XElement elem, string name)
	{
		string s = (string)elem.Element(name);
		return string.IsNullOrEmpty(s) ? null : s;
	}
	var doc = XDocument.Load(rulesfile);
	var mlist = new List<PMethod>();
	foreach (XElement melem in doc.Root.Elements("method"))
	{
		string name = Getattr(melem, "name");
		string meth = Getattr(melem, "method");
		string ep = Getattr(melem, "endpoint");
		bool? browsable = (bool?)melem.Attribute("browsable");
		string session = Getattr(melem, "session");
		string summary = Getelem(melem, "summary");
		string remarks = Getelem(melem, "remarks");
		string rawauth = Getattr(melem, "auth");
		string[] auths = rawauth?.Split(',').Where(a => a != "*").ToArray();
		var pm = new PMethod()
		{
			Name = name,
			Method = meth,
			Endpoint = ep,
			Browsable = browsable,
			Summary = summary,
			Remarks = remarks,
			Session = session,
			Auths = auths
		};
		var retelem = melem.Element("return");
		if (retelem != null)
		{
			pm.ReturnType = Getattr(retelem, "type");
			pm.ReturnContentType = Getattr(retelem, "contentType");
			pm.ReturnDesc = Getattr(retelem, "description");
		}
		var pselem = melem.Element("parameters");
		if (pselem != null)
		{
			pm.Params = pselem.Elements("parameter").Select(p => new PParam()
			{
				IsRoute = (bool?)p.Attribute("route"),
				Type = Getattr(p, "type"),
				Name = Getattr(p, "name"),
				Desc = Getattr(p, "description"),
				Dfault = Getattr(p, "default")
			}).ToArray();
		}
		else
		{
			pm.Params = Array.Empty<PParam>();
		}
		var exselem = melem.Element("exceptions");
		if (exselem != null)
		{
			pm.Exs = exselem.Elements("exception").Select(e => new PEx()
			{
				Type = Getattr(e, "type"),
				Desc = Getattr(e, "description")
			}).ToArray();
		}
		else
		{
			pm.Exs = Array.Empty<PEx>();
		}
		var webelem = melem.Element("web");
		if (webelem != null)
		{
			pm.WebPostType = Getattr(webelem, "postType");
			pm.WebFromHeaderName = Getattr(webelem, "fromHeaderName");
			pm.WebFromHeader = Getattr(webelem, "fromHeader");
			pm.WebPostDirect = (bool?)webelem.Attribute("direct");
		}
		mlist.Add(pm);
	}
	return mlist.ToArray();
}

static string Unesc(string value) => value?.Replace("[", "<").Replace("]", ">").Replace("`", "\"");

static string TitleCase(string value) => value == null ? null : CultureInfo.InvariantCulture.TextInfo.ToTitleCase(value);

static readonly string[] SkipNullCheckTypes = new string[] { "string?", "int", "long", "short", "bool", "DateTime", "DateTimeOffset", "Guid", "JobTocType", "FunctionAction" };

string TTName => Host.GetType().Name;

Version TTVer => Host.GetType().Assembly.GetName().Version;

string[] NiceLines(string s)
{
	if (string.IsNullOrEmpty(s)) return null;
	s = s.Trim();
	s = Regex.Replace(s, @"\n\s*", " ");
	int maxlen = 140;
	MatchCollection mc = Regex.Matches(s, @"(.{1," + (maxlen - 1) + @"})(?:\s|$)");
	return mc.Cast<Match>().Select(m => m.Value).ToArray();
}

sealed class PMethod
{
	public string Name;
	public string ReturnType;
	public string ReturnContentType;
	public string ReturnDesc;
	public string Method;
	public string Endpoint;
	public bool? Browsable;
	public string Summary;
	public string Remarks;
	public string[] Auths;
	public string WebPostType;
	public bool? WebPostDirect;
	public string WebFromHeaderName;
	public string WebFromHeader;
	public string Session;
	public PParam[] Params;
	public PEx[] Exs;
	public string MakeParams1()
	{
		return string.Join(", ", Params.Select(p => string.Format("{0} {1}{2}", p.Type, p.Name, p.Dfault == null ? "" : " = " + p.Dfault)));
	}
	public string MakeParams2()
	{
		return string.Join(", ", Params.Select(p => p.Name));
	}
	public PParam[] RefTypeParams => Params.Where(p => !SkipNullCheckTypes.Contains(p.Type)).ToArray();
	public string RouteBase => Endpoint?.Split('/').First();
}

void EmitHeader()
{
#>
//================================================================================================
// <auto-generated>
// This code was generated by a tool on machine <#=Environment.MachineName#> at local time <#=DateTime.Now.ToString()#>.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//================================================================================================
<#+
}

sealed class PParam
{
	public bool? IsRoute;
	public string Type;
	public string Name;
	public string Desc;
	public string Dfault;
}

sealed class PEx
{
	public string Type;
	public string Desc;
}
 #>