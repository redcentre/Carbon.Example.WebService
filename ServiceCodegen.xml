<?xml version="1.0" encoding="utf-8" ?>
<methods>

  <!-- SERVICE -->

  <method name="MockError" method="Get" endpoint="service/mockerror/{number}">
    <summary>
      Always throws an exception with a message containing the [paramref name="number"/].
    </summary>
    <remarks>
      This test method verifies that an unhandled service-side exception is converted into a [c]CarbonServiceException[/c] expected on the client-side.
    </remarks>
    <parameters>
      <parameter route="true" type="int" name="number" description="An arbitrary number to pass into the mock Exception."/>
    </parameters>
    <return type="int" description="No value will ever be returned. An Exception is always thrown (there is a one in 4 billion chance of no throw)."/>
    <exceptions>
      <exception type="CarbonServiceException" description="This exception is always thrown"/>
    </exceptions>
  </method>

  <method name="GetServiceInfo" method="Get" endpoint="service/info">
    <summary>Gets information about the hosting environment and version of the service.</summary>
    <return type="ServiceInfo" description="An instance of a [c]ServiceInfo[/c] class."/>
  </method>

  <method name="GetCacheInfo" method="Get" endpoint="service/cache/info/{maxnames}">
    <summary>Gets cache information.</summary>
    <parameters>
      <parameter route="true" type="int" name="maxnames" description="maxmum number of cached file names to return."/>
    </parameters>
    <return type="CacheInfo" description="Information about cached files."/>
  </method>

  <method name="DeleteCacheFiles" method="Delete" endpoint="service/cache/{glob}">
    <summary>Deletes all or selected cache files.</summary>
    <parameters>
      <parameter route="true" type="string" name="glob" description="Glob pattern of files to delete. Specifify '*' to delete all files."/>
    </parameters>
    <return type="int" description="Count of files deleted."/>
  </method>

  <method name="StartLog" method="Get" endpoint="service/log/start">
    <summary>Starts internal logging.</summary>
    <return type="bool" description="Always returns true."/>
  </method>

  <method name="EndLog" method="Get" endpoint="service/log/end">
    <summary>Ends internal logging.</summary>
    <return type="bool" description="Always returns true."/>
  </method>

  <method name="ClearLog" method="Get" endpoint="service/log/clear">
    <summary>Clears internal logging.</summary>
    <return type="bool" description="Always returns true."/>
  </method>

  <method name="ListLog" method="Get" endpoint="service/log/list">
    <summary>Lists internal logging lines.</summary>
    <return type="string" description="An array of string logging lines."/>
  </method>

  <method name="ReadTiming1" method="Post" endpoint="service/readtiming1">
    <summary>Blob read timing tests (type 1).</summary>
    <parameters>
      <parameter type="ReadTimingRequest1" name="request" description="Parameters for the timing tests"/>
    </parameters>
    <web postType="ReadTimingRequest1" direct="true"/>
    <return type="string[]" description="Lines of the results."/>
  </method>

  <method name="ReadTiming2" method="Post" endpoint="service/readtiming2">
    <summary>Blob read timing tests (type 2).</summary>
    <parameters>
      <parameter type="ReadTimingRequest2" name="request" description="Parameters for the timing tests"/>
    </parameters>
    <web postType="ReadTimingRequest2" direct="true"/>
    <return type="string[]" description="Lines of the results."/>
  </method>

  <method name="LogTest" method="Get" endpoint="service/log/test">
    <summary>Test the Azure logging.</summary>
    <return type="bool" description="Always returns true."/>
  </method>

  <!-- SESSION -->

  <method name="StartSessionFree" method="Post" endpoint="session/start/free" session="start">
    <summary>Starts a web service session using the restricted free licensing account.</summary>
    <summary>A successful request causes the returned session id to be included in the headers of all subsequent service calls, effectively indicating to the service that the calls are coming from an authenticated session.</summary>
    <parameters>
      <parameter type="string" name="clientIdentifier" description="A value that identifies the client using the free licence. Use an email address, company name or similar distinctive value."/>
      <parameter type="bool" name="skipCache" description="True to skip any cached licence and force retrieval of a new one from the licensing web service." default="false"/>
    </parameters>
    <web postType="AuthenticateFreeRequest"/>
    <return type="SessionInfo" description="Summary information about the licensing account associated with the session."/>
  </method>

  <method name="StartSessionId" method="Post" endpoint="session/start/authenticate/id" session="start">
    <summary>Authenticates account Name and Password credentials. Creates a new session.</summary>
    <parameters>
      <parameter type="string" name="id" description="Licensing account Id."/>
      <parameter type="string" name="password" description="Licensing account password."/>
      <parameter type="bool" name="skipCache" description="True to skip any cached licence and force retrieval of a new one from the licensing web service." default="false"/>
    </parameters>
    <web postType="AuthenticateIdRequest"/>
    <return type="SessionInfo" description="Summary information about the licensing account associated with the session."/>
    <exceptions>
      <exception type="CarbonServiceException" description="Thrown if the credentials are incorrect."/>
    </exceptions>
  </method>

  <method name="StartSessionName" method="Post" endpoint="session/start/authenticate/name" session="start">
    <summary>Authenticates account Name and Password credentials. Creates a new session.</summary>
    <parameters>
      <parameter type="string" name="name" description="Licensing account Name."/>
      <parameter type="string" name="password" description="Licensing account password."/>
    </parameters>
    <web postType="AuthenticateNameRequest"/>
    <return type="SessionInfo" description="Summary information about the licensing account associated with the session."/>
    <exceptions>
      <exception type="CarbonServiceException" description="Thrown if the credentials are incorrect."/>
    </exceptions>
  </method>

  <method name="ForceSessions" method="Delete" endpoint="session/force/{idlist}">
    <summary>Forcibly ends all sessions with specified Ids.</summary>
    <remarks>This method can be used by clients who wish to enforce the policy of a single session per account.</remarks>
    <parameters>
      <parameter route="true" type="string" name="idlist" description="A comma joined string of session Ids to forcibly end."/>
    </parameters>
    <return type="int" description="The number of sessions that were forcibly ended."/>
  </method>

  <method name="EndSession" method="Delete" endpoint="session/end" session="end" auth="*">
    <summary>End a web service session. Licences are not returned.</summary>
    <remarks>Any active session Id is removed and subsequence web service calls will not include a session Id in the headers, effectively indicating to the service that the calls are coming from an anonymous (not authenticated) caller.</remarks>
    <web fromHeaderName="CarbonServiceClient.SessionIdHeaderKey" fromHeader="sessionId"/>
    <return type="bool" description="True if the session was ended, False if it was not found."/>
  </method>

  <method name="ReadSession" method="Get" endpoint="session/{id}" auth="*">
    <summary>Reads a session by Session Id.</summary>
    <remarks>Clients can use this method to determine if a session is 'alive'.</remarks>
    <parameters>
      <parameter route="true" type="string" name="id" description="The Session Id to read."/>
    </parameters>
    <return type="SessionStatus" description="A [c]SessionStatus[/c] object or null if not found."/>
  </method>

  <method name="ListSessions" method="Get" endpoint="session/list" auth="*">
    <summary>Lists web service sessions. Intended for use in monitoring tools.</summary>
    <return type="SessionStatus[]" description="An array of [c]SessionStatus[/c] objects."/>
  </method>

  <method name="ChangePassword" method="Post" endpoint="session/changepass" auth="*">
    <summary>Changes a licensing account password.</summary>
    <parameters>
      <parameter type="string" name="userId" description="Licensing account user Id."/>
      <parameter type="string" name="oldPassword" description="Old password."/>
      <parameter type="string" name="newPassword" description="New password."/>
    </parameters>
    <web postType="ChangePasswordRequest"/>
    <return type="int" description="A count of database records changed by processing."/>
  </method>

  <method name="UpdateAccount" method="Post" endpoint="session/updateaccount" auth="*">
    <summary>Updates a subset of account details.</summary>
    <parameters>
      <parameter type="string" name="userId" description="Licensing account user Id."/>
      <parameter type="string" name="userName" description="New user name."/>
      <parameter type="string" name="comment" description="New comment."/>
      <parameter type="string" name="email" description="New email address."/>
    </parameters>
    <web postType="UpdateAccountRequest"/>
    <return type="int" description="A count of database records changed by processing."/>
  </method>

  <!-- JOB -->

  <method name="OpenCloudJob" method="Post" endpoint="job/open" auth="*">
    <summary>Opens a cloud job and selects it for the crosstab engine.</summary>
    <parameters>
      <parameter type="string" name="customerName" description="Cloud customer name (Storage Account name)."/>
      <parameter type="string" name="jobName" description="Cloud job name (Container name)."/>
      <parameter type="string?" name="vartreeName" default="null" description="Variable tree name."/>
      <parameter type="bool" name="getDisplayProps" default="false" description="TODO"/>
      <parameter type="bool" name="getVartreeNames" default="false" description="TODO"/>
      <parameter type="bool" name="getAxisNames" default="false" description="TODO"/>
      <parameter type="JobTocType" name="tocType" default="JobTocType.ExecUser" description="TODO"/>
      <parameter type="bool" name="getDrillFilters" default="false" description="TODO"/>
    </parameters>
    <web postType="OpenCloudJobRequest"/>
    <return type="OpenCloudJobResponse" description="An optional aggregation of information about the opened job."/>
    <exceptions>
      <exception type="CarbonServiceException" description="Thrown if the credentials are incorrect or the service call fails."/>
    </exceptions>
  </method>

  <method name="CloseJob" method="Delete" endpoint="job/close" auth="*">
    <summary>Closes the currently open job.</summary>
    <return type="bool" description="True if the job was closed. False if no job was open."/>
  </method>

  <method name="ReadFileAsLines" method="Post" endpoint="job/readfile/lines" auth="*">
    <summary>Reads the text lines from a file.</summary>
    <parameters>
      <parameter type="string" name="name" description="Simple or path qualified name of the file to read."/>
    </parameters>
    <web postType="ReadFileRequest"/>
    <return type="string[]" description="Text lines of a file under the job home directory. Null is returned if the file is not found."/>
  </method>

  <method name="ListSimpleToc" method="Get" endpoint="job/toc/simple/{load}" auth="*">
    <summary>List the structure and contents of a job's simple Table of Contents.</summary>
    <parameters>
      <parameter route="true" type="bool" name="load" description="User name of the TOC section to return."/>
    </parameters>
    <return type="GenNode[]" description="An array of root nodes representing the hierarchical structure and contents of the simple Table of Contents of the currently open job."/>
  </method>

  <method name="ListFullToc" method="Get" endpoint="job/toc/full/{load}" auth="*">
    <summary>List the structure and contents of a job's full Table of Contents.</summary>
    <parameters>
      <parameter route="true" type="bool" name="load" description="True to reload the TOC."/>
    </parameters>
    <return type="GenNode[]" description="An array of root nodes representing the hierarchical structure and contents of the full Table of Contents of the currently open job."/>
  </method>

  <method name="ListExecUserToc" method="Get" endpoint="job/toc/execuser/{load}" auth="*">
    <summary>List the structure and contents of a job's Exec User Table of Contents.</summary>
    <parameters>
      <parameter route="true" type="bool" name="load" description="True to reload the TOC."/>
    </parameters>
    <return type="GenNode[]" description="An array of root nodes representing the hierarchical structure and contents of the Exec User Table of Contents of the currently open job."/>
  </method>

  <method name="ListVartrees" method="Get" endpoint="job/vartree/list" auth="*">
    <summary>List variable tree names in the currently open job.</summary>
    <return type="string[]" description="A non-null array of variable tree names in the currently open job."/>
  </method>

  <method name="SetVartreeName" method="Get" endpoint="job/vartree/{name}" auth="*">
    <summary>Sets the variable (and axis) tree names in the currently open job.</summary>
    <parameters>
      <parameter route="true" type="string" name="name" description="The name of the variable and axis trees to set."/>
    </parameters>
    <return type="bool" description="True if the name was changed."/>
  </method>

  <method name="VariableTreeAsNodes" method="Get" endpoint="job/vartree/nodes" auth="*">
    <summary>Gets the currently set variable tree name as a hierarchy of nodes.</summary>
    <return type="GenNode[]" description="Root nodes representing the shape and contents of the active variable tree."/>
  </method>

  <method name="AxisTreeAsNodes" method="Get" endpoint="job/axistree/nodes" auth="*">
    <summary>Gets the currently set axis tree name as a hierarchy of nodes.</summary>
    <return type="GenNode[]" description="Root nodes representing the shape and contents of the active axis tree."/>
  </method>

  <method name="FunctionTreeAsNodes" method="Get" endpoint="job/function/nodes" auth="*">
    <summary>Gets the function tree as a hierarchy of nodes.</summary>
    <return type="GenNode[]" description="Root nodes representing the shape and contents of the function tree."/>
  </method>

  <method name="ListAxisTreeChildren" method="Get" endpoint="job/axistree/{name}/nodes" auth="*">
    <summary>List axis tree child nodes.</summary>
    <parameters>
      <parameter route="true" type="string" name="name" description="The name of the axis tree to retrieve."/>
    </parameters>
    <return type="GenNode[]" description="A non-null array of nodes for the specified axis name."/>
  </method>

  <method name="VarAsNodes" method="Get" endpoint="job/varnodes/{name}" auth="*">
    <summary>Gets child nodes for a variable name.</summary>
    <parameters>
      <parameter route="true" type="string" name="name" description="The name of the variable to retrieve."/>
    </parameters>
    <return type="GenNode[]" description="An array of GenNode containing children of a variable name."/>
  </method>

  <method name="FunctionAction" method="Post" endpoint="job/function" auth="*">
    <summary>Creates, edits or deletes functions.</summary>
    <parameters>
      <parameter type="FunctionAction" name="action" description="Enumerated action to perform"/>
      <parameter type="string" name="expression" description="The expression to process"/>
      <parameter type="string?" name="newExpression" description="The replacement expression"/>
      <parameter type="string?" name="label" description="The replacement label"/>
    </parameters>
    <web postType="FunctionActionRequest"/>
    <return type="GenNode[]" description="An updated set of function nodes."/>
  </method>

  <method name="GetNewSpec" method="Get" endpoint="job/spec/new" auth="*">
    <summary>Gets a new spec.</summary>
    <return type="SpecAggregate" description="Specification information."/>
  </method>

  <method name="GetEditSpec" method="Get" endpoint="job/spec/edit" auth="*">
    <summary>Gets the edit spec.</summary>
    <return type="SpecAggregate" description="Specification information."/>
  </method>

  <method name="ValidateSpec" method="Post" endpoint="job/spec/validate/spec" auth="*">
    <summary>Validates a table spec.</summary>
    <parameters>
      <parameter type="TableSpec" name="request" description="Specification information."/>
    </parameters>
    <web postType="TableSpec" direct="true"/>
    <return type="GenericResponse" description="A generic simple response with validation results."/>
  </method>

  <method name="ValidateExp" method="Post" endpoint="job/spec/validate/exp" auth="*">
    <summary>Validates an expression.</summary>
    <parameters>
      <parameter type="ValidateExpRequest" name="request" description="Expression to validate."/>
    </parameters>
    <web postType="ValidateExpRequest" direct="true"/>
    <return type="GenericResponse" description="A generic simple response with validation results."/>
  </method>

  <method name="RunSpec" method="Post" endpoint="job/spec" auth="*">
    <summary>Runs a table spec.</summary>
    <parameters>
      <parameter type="RunSpecRequest" name="request" description="Specification information."/>
    </parameters>
    <web postType="RunSpecRequest" direct="true"/>
    <return type="XlsxResponse" description="TODO."/>
  </method>

  <method name="Nest" method="Post" endpoint="job/spec/nest" auth="*">
    <summary>Nest variables.</summary>
    <parameters>
      <parameter type="NestRequest" name="request" description="Nest request information."/>
    </parameters>
    <web postType="NestRequest" direct="true"/>
    <return type="GenNode[]" description="TODO."/>
  </method>

  <method name="ImportFull" method="Post" endpoint="job/import/full" auth="*">
    <summary>General purpose import (full).</summary>
    <parameters>
      <parameter type="ImportSettings" name="request" description="Import settings."/>
    </parameters>
    <web postType="ImportSettings" direct="true"/>
    <return type="string" description="TODO."/>
  </method>

  <method name="ImportPartial" method="Post" endpoint="job/import/partial" auth="*">
    <summary>General purpose import (partial).</summary>
    <parameters>
      <parameter type="ImportSettings" name="request" description="Import settings."/>
    </parameters>
    <web postType="ImportSettings" direct="true"/>
    <return type="string" description="TODO."/>
  </method>

  <!-- REPORT -->

  <method name="GetProps" method="Get" endpoint="report/props" auth="*">
    <summary>Get the display proeprties of the currently open report.</summary>
    <return type="XDisplayProperties" description="A [c]XDisplayProperties[/c] class instance containing report properties."/>
  </method>

  <method name="SetProps" method="Post" endpoint="report/props" auth="*">
    <summary>Sets the display properties of the currently open report.</summary>
    <parameters>
      <parameter type="XDisplayProperties" name="request" description="A [c]XDisplayProperties[/c] class instance containing the new report properties."/>
    </parameters>
    <web postType="XDisplayProperties" direct="true"/>
    <return type="XlsxResponse" description="TODO"/>
  </method>

  <method name="GenTab" method="Post" endpoint="report/gentab" auth="*">
    <summary>Generates a crosstab report in different formats.</summary>
    <parameters>
      <parameter type="string?" name="name" description="Cloud customer name (Storage Account name)."/>
      <parameter type="string" name="top" description="Cloud job name (Container name)."/>
      <parameter type="string" name="side" description="TODO"/>
      <parameter type="string?" name="filter" description="TODO"/>
      <parameter type="string?" name="weight" description="TODO"/>
      <parameter type="XSpecProperties" name="sprops" description="TODO"/>
      <parameter type="XDisplayProperties" name="dprops" description="TODO"/>
    </parameters>
    <web postType="GenTabRequest"/>
    <return type="string[]" description="Lines of a crosstab report."/>
  </method>

  <method name="LoadReport" method="Post" endpoint="report/load" auth="*">
    <summary>Loads a report and sets it as the currently loaded and active report for the session.</summary>
    <parameters>
      <parameter type="LoadReportRequest" name="request" description="Job relative path and name of the report to load."/>
    </parameters>
    <web postType="LoadReportRequest" direct="true"/>
    <return type="GenericResponse" description="The reponse code is currently always zero (TODO what errors can happen?)."/>
  </method>

  <method name="UnloadReport" method="Get" endpoint="report/unload" auth="*">
    <summary>Unloads any previously loaded report and sets a new unsaved report as active.</summary>
    <return type="bool" description="Always returns true."/>
  </method>

  <method name="GenerateXlsx" method="Get" endpoint="report/xlsx" auth="*">
    <summary>Generates XLSX for the currently opened report.</summary>
    <return type="XlsxResponse" description="The response gives the url and attributes of the generated XLSX workbook."/>
  </method>

  <method name="MultiOxt" method="Post" endpoint="report/multioxt" auth="*">
    <summary>Generates OXT outputs for multiple reports.</summary>
    <parameters>
      <parameter type="MultiOxtRequest" name="request" description="TODO"/>
    </parameters>
    <web postType="MultiOxtRequest" direct="true"/>
    <return type="MultiOxtResponse" description="TODO"/>
  </method>

  <method name="MultiOxtStart" method="Post" endpoint="report/multioxt/start" auth="*">
    <summary>Starts backgorund generation of OXT outputs for multiple reports.</summary>
    <parameters>
      <parameter type="MultiOxtRequest" name="request" description="TODO"/>
    </parameters>
    <web postType="MultiOxtRequest" direct="true"/>
    <return type="Guid" description="A unique identifier of the background process."/>
  </method>

  <method name="MultiOxtQuery" method="Get" endpoint="report/multioxt/query/{id}" auth="*" browsable="false">
    <summary>Gets the status of background generation of multiple reports.</summary>
    <parameters>
      <parameter route="true" type="Guid" name="id" description="Id of the background processing to query."/>
    </parameters>
    <return type="MultiOxtResponse" description="TODO"/>
  </method>

  <method name="MultiOxtCancel" method="Get" endpoint="report/multioxt/cancel/{id}" auth="*">
    <summary>Cancels a background generation of multiple reports.</summary>
    <parameters>
      <parameter route="true" type="Guid" name="id" description="Id of the background processing to cancel."/>
    </parameters>
    <return type="bool" description="True if the background process was found and cancelled."/>
  </method>

  <method name="DeleteInUserToc" method="Post" endpoint="report/delete" auth="*">
    <summary>Deletes a report or folder in the user's TOC.</summary>
    <parameters>
      <parameter type="string" name="name" description="The name of the folder or report relative to the TOC root"/>
    </parameters>
    <web postType="DeleteInUserTocRequest"/>
    <return type="GenericResponse" description="A status code and optional error message."/>
  </method>

  <method name="QuickUpdateReport" method="Post" endpoint="report/quickupdate" auth="*">
    <summary>PENDING.</summary>
    <parameters>
      <parameter type="QuickUpdateRequest" name="request" description="TODO"/>
    </parameters>
    <web postType="QuickUpdateRequest" direct="true"/>
    <return type="XlsxResponse" description="Details of the generated report."/>
  </method>

  <method name="SaveReport" method="Post" endpoint="report/save" auth="*">
    <summary>Saves the current crosstab report as a job relative path and name.</summary>
    <parameters>
      <parameter type="string" name="name" description="Job relative name of the report to save. Any invalid characters in the name are converted to underscore '_'."/>
      <parameter type="string?" name="sub" description="Optional subfolder."/>
    </parameters>
    <web postType="SaveReportRequest"/>
    <return type="GenericResponse" description="TODO"/>
  </method>

  <method name="GenTabExcelBlob" method="Post" endpoint="report/gentab/excel/blob" auth="*">
    <summary>Generates a crosstab report as an Excel workbook and saves it in a blob.</summary>
    <parameters>
      <parameter type="GenTabRequest" name="request" description="A serialized [c]GenTabRequest[/c] provided in the request body."/>
    </parameters>
    <web postType="GenTabRequest" direct="true"/>
    <return type="XlsxResponse" description="A serialized [c]XlsxResponse[/c] containing the Uri and attributes of the generated Excel workbook Blob."/>
  </method>

  <method name="GenTabHtml" method="Post" endpoint="report/gentab/html" auth="*">
    <summary>Generates a crosstab report as lines of a HTML document.</summary>
    <parameters>
      <parameter type="GenTabHtmlRequest" name="request" description="Request parameters."/>
    </parameters>
    <web postType="GenTabHtmlRequest" direct="true"/>
    <return type="string[]" description="The lines of a crosstab report as a HTML document."/>
  </method>

  <method name="GenTabHtmlJoined" method="Post" endpoint="report/gentab/html/joined" auth="*">
    <summary>Generates a crosstab report as a single line of a HTML document.</summary>
    <parameters>
      <parameter type="GenTabHtmlRequest" name="request" description="Request parameters."/>
    </parameters>
    <web postType="GenTabHtmlRequest" direct="true"/>
    <return type="string" description="The lines of a crosstab report as a HTML document joined to a single string."/>
  </method>

  <method name="AxisSyntaxToNodes" method="Post" endpoint="report/syntax/tonodes" auth="*">
    <summary>Converts a syntax string into a tree of generic nodes.</summary>
    <parameters>
      <parameter type="string" name="request" description="Syntax string to convert to nodes."/>
    </parameters>
    <web postType="string" direct="true"/>
    <return type="GenNode[]" description="A tree of generic nodes."/>
  </method>

  <method name="AxisNodesToSyntax" method="Post" endpoint="report/syntax/fromnodes" auth="*">
    <summary>Converts a tree of generic nodes to a syntax string.</summary>
    <parameters>
      <parameter type="GenNode[]" name="request" description="Nodes to convert to a syntax string."/>
    </parameters>
    <web postType="GenNode[]" direct="true"/>
    <return type="string" description="A syntax string."/>
  </method>

  <method name="GetCurrentSyntax" method="Get" endpoint="report/syntax" auth="*">
    <summary>Gets an array of current report syntax strings.</summary>
    <return type="string?[]" description="An array of syntax strings in the order Top, Side, Filter, Weight."/>
  </method>

  <method name="ValidateSyntax" method="Post" endpoint="report/syntax/validate" auth="*">
    <summary>Validates a syntax string.</summary>
    <parameters>
      <parameter type="string" name="request" description="Syntax string to validate."/>
    </parameters>
    <web postType="string" direct="true"/>
    <return type="string" description="An error message or null if the syntax is valid."/>
  </method>

  <method name="Format" method="Get" endpoint="report/format/{format}" auth="*">
    <summary>Invokes a Carbon format.</summary>
    <parameters>
      <parameter route="true" type="XOutputFormat" name="format" description="Report format enumeration value."/>
    </parameters>
    <return type="string[]" description="An array of string lines of a report format."/>
  </method>

  <!-- DASHBOARD -->

  <method name="ListDashboards" method="Get" endpoint="dashboard/list/{cust}/{job}" auth="*">
    <summary>Lists dashboards for a customer and job.</summary>
    <parameters>
      <parameter route="true" type="string" name="cust" description="Customer name."/>
      <parameter route="true" type="string" name="job" description="Job name."/>
    </parameters>
    <return type="AzDashboard[]" description="An array of [c]AzDashboard[/c] objects."/>
  </method>

  <method name="GetDashboard" method="Post" endpoint="dashboard/get" auth="*">
    <summary>Get a dashboard in a customer and job.</summary>
    <parameters>
      <parameter type="string" name="cust" description="Customer name."/>
      <parameter type="string" name="job" description="Job name."/>
      <parameter type="string" name="name" description="Dashboard name."/>
    </parameters>
    <web postType="DashboardRequest"/>
    <return type="AzDashboard" description="The Dashboard or null if not found."/>
  </method>

  <method name="DeleteDashboard" method="Post" endpoint="dashboard/delete" auth="*">
    <summary>Deletes a dashboard in a customer and job.</summary>
    <parameters>
      <parameter type="string" name="cust" description="Customer name."/>
      <parameter type="string" name="job" description="Job name."/>
      <parameter type="string" name="name" description="Dashboard name."/>
    </parameters>
    <web postType="DashboardRequest"/>
    <return type="bool" description="True if the dashboard was delete, false if was not found."/>
  </method>

  <method name="UpsertDashboard" method="Post" endpoint="dashboard/upsert" auth="*">
    <summary>Updates or inserts a dashboard.</summary>
    <parameters>
      <parameter type="UpsertDashboardRequest" name="request" description="Specifies the dashboard data to update or insert."/>
    </parameters>
    <web postType="UpsertDashboardRequest" direct="true"/>
    <return type="AzDashboard" description="The dashboard after processing."/>
  </method>
  
  <!-- Surveys (TSAPI Standard) -->

  <!--<method name="TsapiStandardList" method="Get" endpoint="Surveys" auth="*">
    <summary>Lists TSAPI exportable jobs (surveys).</summary>
    <return type="SurveyDetail[]" description="An array of [c]SurveyDetail[/c] objects."/>
  </method>-->

</methods>